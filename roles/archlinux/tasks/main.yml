---
- name: install reflector
  pacman: name=reflector state=present update_cache=yes
  become: yes

- name: generate pacman mirrorlist
  command: /usr/bin/reflector --country "United States" -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist
  become: yes

- name: update pacman package lists
  command: /usr/bin/pacman -Syy --noconfirm
  become: yes

- name: perform full upgrade
  command: /usr/bin/pacman -Su --noconfirm
  become: yes

- name: create normal user
  user: name={{ archlinux.username }} createhome=yes group=users groups=wheel
  become: yes

- name: install utilities
  pacman: name={{ item }} state=present
  with_items:
    - curl
    - aria2
    - rsync
    - openssh
    - ntp
    - alsa-utils
  become: yes

- name: enable network time
  service: name=ntpd state=started enabled=yes
  become: yes

- name: install fonts
  pacman: name={{ item }} state=present
  with_items:
    - ttf-dejavu
    - ttf-liberation
    - ttf-droid
    - ttf-inconsolata
    - adobe-source-code-pro-fonts
  become: yes

- name: install GUI
  pacman: name={{ item }} state=present
  with_items:
    - i3-wm
    - i3lock
    - i3status
    - dmenu
    - lightdm
    - lightdm-gtk3-greeter
    - lxappearance
    - arandr
    - elementary-icon-theme
    - xcursor-simpleandsoft
    - feh
  become: yes

- name: enable GUI on boot
  service: name=lightdm enabled=yes
  become: yes

- name: copy wallpaper image
  copy: src=korra_masseffect_wallpaper.png dest=/home/{{ archlinux.username }}/.wallpaper owner={{ archlinux.username }} group=users
  become: yes
  become_user: "{{ archlinux.username }}"

- name: template feh wallpaper script
  template: src=fehbg dest=/home/{{ archlinux.username }}/.fehbg owner={{ archlinux.username }} group=users
  become: yes
  become_user: "{{ archlinux.username }}"

- name: template i3 configuration
  template: src=i3/config dest=/home/{{ archlinux.username }}/.i3/config owner={{ archlinux.username }} group=users
  become: yes

- name: template i3status configuration
  template: src=i3/i3status dest=/home/{{ archlinux.username }}/.i3/i3status owner={{ archlinux.username }} group=users
  become: yes

- name: template .bashrc
  become: yes
  template: src=bashrc dest=/home/{{ archlinux.username}}/.bashrc owner={{ archlinux.username }} group=users

- name: template Xresources
  template: src=Xresources dest=/home/{{ archlinux.username }}/.Xresources owner={{ archlinux.username }} group=users
  become: yes

- name: install pulseaudio/alsa
  pacman: name={{ item }} state=present
  with_items:
    - alsa-utils
    - pulseaudio
    - pulseaudio-alsa
    - paprefs
    - pavucontrol

- name: install applications
  pacman: name={{ item }} state=present
  with_items:
    - xterm
    - pcmanfm
    - evince
    - gimp
    - viewnior
    - libreoffice-still
    - vlc
  become: yes

- name: install development enviornment
  become: yes
  pacman: name={{ item }} state=present
  with_items:
    # C/C++
    - base-devel
    - cmake
    - premake
    - gdb
    - valgrind
    # Python
    - python2
    - python2-pip
    - python
    - python-pip
    # Ruby
    - ruby
    # Java
    - jdk7-openjdk
    - openjdk7-doc
    - openjdk7-src
    - jdk8-openjdk
    - openjdk8-doc
    - openjdk8-src
    - apache-ant
    - maven
    # Version Control
    - git
    - subversion
    # Editors
    - gvim
    # Other tools
    - openssh
    - virtualbox
    - vagrant

- name: configure virtualbox kernel modules
  template: src=virtualbox.conf dest=/etc/modules-load.d/virtualbox.conf
  become: yes

- name: install vmware workstation dependencies
  pacman: name={{ item }}
  with_items:
    - fuse
    - gtkmm
    - linux-headers
  when: archlinux.vmware|bool
  become: yes

- name: template vmware systemd service
  template: src=vmware.service dest=/etc/systemd/system/vmware.service
  when: archlinux.vmware|bool
  become: yes

- name: install vagrant vbguest plugin
  command: "/usr/bin/vagrant plugin install vagrant-vbguest"
  become: yes
  become_user: "{{ archlinux.username }}"

- name: install vagrant vmware plugin (license required)
  command: /usr/bin/vagrant plugin install vagrant-vmware-workstation
  when: archlinux.vmware|bool
  become: yes
  become_user: "{{ archlinux.username }}"

- name: configure git name
  command: "/usr/bin/git config --global user.name \"{{ archlinux.git.name }}\""
  become: yes
  become_user: "{{ archlinux.username }}"

- name: configure git email
  command: "/usr/bin/git config --global user.email \"{{ archlinux.git.email }}\""
  become: yes
  become_user: "{{ archlinux.username }}"

- name: install jekyll
  gem: name=jekyll state=present
  become: yes
  become_user: "{{ archlinux.username }}"

- name: create .vimrc directory
  file: path="/home/{{ archlinux.username }}/.vim/bundle" owner={{ archlinux.username }} group=users state=directory
  become: yes
  become_user: "{{ archlinux.username }}"

- name: install Vundle
  git: repo=https://github.com/gmarik/Vundle.vim.git dest="/home/{{ archlinux.username }}/.vim/bundle/Vundle.vim" accept_hostkey=yes
  become: yes
  become_user: "{{ archlinux.username }}"

- name: template .vimrc
  template: src=vimrc dest=/home/{{ archlinux.username }}/.vimrc owner={{ archlinux.username }} group=users
  become: yes
  become_user: "{{ archlinux.username }}"

- name: install Vundle plugins
  command: "/usr/bin/vim +PluginInstall +qall!"
  become: yes
  become_user: "{{ archlinux.username }}"

- name: install YouCompleteMe
  command: "/home/{{ archlinux.username }}/.vim/bundle/YouCompleteMe/install.sh"
  become: yes
  become_user: "{{ archlinux.username }}"

- name: uninstall chromium
  pacman: name=chromium state=absent recurse=yes
  become: yes

- name: install AUR packages
  packer: name={{ item }}
  with_items:
    - packer # ensure packer is up to date
    - pacaur
    - powerline-fonts-git # used by vim-powerline
    - google-chrome
    - google-talkplugin
    - intellij-idea-ultimate-edition
    - sublime-text-dev
    - git-annex-bin
    - gtk-theme-boje # a nice dark theme
  become: yes
  become_user: "{{ archlinux.username }}"

- name: vmware instructions
  debug: msg="Install VMWare Workstation manually with '/usr/bin/sh <vmware installer> --eulas-agreed --required --console'"
  when: archlinux.vmware|bool

